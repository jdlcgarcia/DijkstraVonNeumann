<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">DijkstraVonNeumann</string>
    <string name="action_settings">Settings</string>
    <string name="title_vonneumann">John von Neumann</string>
    <string name="CD_vonneumann">Picture of John von Neumann</string>
    <string name="desc_vonneumann">Von Neumann was born Neumann János Lajos in Budapest, Austro-Hungarian Empire, to wealthy Jewish parents. He was the eldest of three brothers. His father, Neumann Miksa (Max Neumann) was a banker, who held a doctorate in law. He had moved to Budapest from Pécs at the end of the 880s. Miksa\'s father (Mihály b. 839) and grandfather (Márton) were both born in Ond (now part of the town of Szerencs), Zemplén county, northern Hungary. John\'s mother was Kann Margit (Margaret Kann).
Her parents were Jakab Kann II (Pest (now Budapest) 845–928) and Katalin Meisels (Munkács, Kárpátalja c. 854–94). In 93, his father was elevated to the nobility for his service to the Austro-Hungarian empire by Emperor Franz Josef. The Neumann family thus acquiring the hereditary title margittai, Neumann János became margittai Neumann János (John Neumann of Margitta), which he later changed to the German Johann von Neumann. János, nicknamed Jancsi (Johnny), was an extraordinary child prodigy in the areas of language, memorization, and mathematics. As a 6-year-old, he could divide two 8-digit numbers in his head. By the age of 8, he was familiar with differential and integral calculus
Von Neumann was part of a Budapest generation noted for intellectual achievement: he was born in Budapest around the same time as Theodore von Kármán, George de Hevesy, Leó Szilárd, Eugene Wigner , Edward Teller, and Paul Erdős.
John entered the German-speaking Lutheran high school Fasori Evangelikus Gimnázium in Budapest in 9. Although his father insisted he attend school at the grade level appropriate to his age, he agreed to hire private tutors to give him advanced instruction in those areas in which he had displayed an aptitude. At the age of 5, he began to study advanced calculus under the renowned analyst Gábor Szegő. On their first meeting, Szegő was so astounded with the boy\'s mathematical talent that he was brought to tears.
Szegő subsequently visited the von Neumann house twice a week to tutor the child prodigy. Some of von Neumann\'s instant solutions to the problems in calculus posed by Szegő, sketched out with his father\'s stationery, are still on display at the von Neumann archive in Budapest. By the age of 9, von Neumann had published two major mathematical papers, the second of which gave the modern definition of ordinal numbers, which superseded Georg Cantor\'s definition.
He received his Ph.D. in mathematics (with minors in experimental physics and chemistry) from Pázmány Péter University in Budapest at the age of 22. He simultaneously earned a diploma in chemical engineering from the ETH Zurich in Switzerland at his father\'s request, who wanted his son to follow him into industry and therefore invest his time in a more financially useful endeavour than mathematics.</string>
	<string name="title_dijkstra">Edsger Dijkstra</string>
    <string name="CD_dijkstra">Picture of Edsger Dijkstra</string>
    <string name="desc_dijkstra">Edsger Dijkstra was born in Rotterdam. His father was a chemist who was president of the Dutch Chemical Society; he taught chemistry at a secondary school and was later its superintendent. His mother was a housewife. Dijkstra studied theoretical physics at Leiden University, but quickly realized he was more interested in computer science. Originally employed by the Mathematisch Centrum in Amsterdam, he held a professorship at the Eindhoven University of Technology, worked as a research fellow for Burroughs Corporation in the early 1980s, and later held the Schlumberger Centennial Chair in Computer Sciences at the University of Texas at Austin, in the United States. He retired in 2000.
Among his contributions to computer science are a shortest path algorithm, known as Dijkstra\'s algorithm; the Shunting yard algorithm; the THE multiprogramming system, an important early example of structuring a system as a set of layers; the Banker\'s algorithm; and the semaphore construct for coordinating multiple processors and programs. Another concept due to Dijkstra in the field of distributed computing is that of self-stabilization – an alternative way to ensure the reliability of the system. Dijkstra\'s algorithm is used in SPF, Shortest Path First, which is used in the routing protocols OSPF and IS-IS.
While he had programmed extensively in machine code in the 1950s, he came to the conclusion that in high-level languages frequent use of the GOTO statement was usually symptomatic of poor structure. In 1968 he wrote a private paper A Case against the GO TO Statement, which was then published as a letter in CACM. Editor Niklaus Wirth gave this letter the heading Go To Statement Considered Harmful, which introduced the phrase considered harmful into computing. Dijkstra\'s thesis was that departures from linear control flow were clearer if allowed only in disciplined higher-level structures such as the if-then-else statement and the while loop. This methodology was developed into structured programming, the title of his 1972 book, coauthored with C.A.R. Hoare and Ole-Johan Dahl. Dijkstra also strongly opposed the teaching of BASIC.
Dijkstra was known to be a fan of ALGOL 60, and worked on the team that implemented the first compiler for that language. Dijkstra and Jaap Zonneveld, who collaborated on the compiler, agreed not to shave until the project was completed. It was one of the first compilers supporting recursion.
Dijkstra wrote two important papers in 1968, devoted to the structure of a multiprogramming operating system called THE, and to Cooperating Sequential Processes.
From the 1970s, Dijkstra\'s chief interest was formal verification. The prevailing opinion at the time was that one should first write a program and then provide a mathematical proof of correctness. Dijkstra objected noting that the resulting proofs are long and cumbersome, and that the proof gives no insight on how the program was developed. An alternative method is program derivation, to develop proof and program hand in hand. One starts with a mathematical specification of what a program is supposed to do and applies mathematical transformations to the specification until it is turned into a program that can be executed. The resulting program is then known to be correct by construction. Much of Dijkstra\'s later work concerns ways to streamline mathematical argument. In a 2001 interview, he stated a desire for elegance, whereby the correct approach would be to process thoughts mentally, rather than attempt to render them until they are complete. The analogy he made was to contrast the compositional approaches of Mozart and Beethoven.
Dijkstra was one of the early pioneers in the field of distributed computing. In particular, his paper Self-stabilizing Systems in Spite of Distributed Control started the sub-field of self-stabilization.
Many of his opinions on computer science and programming have become widespread. For example, he coined the programming phrase two or more, use a for,[citation needed] alluding to the rule of thumb that when you find yourself processing more than one instance of a data structure, it is time to consider encapsulating that logic inside a loop. He was the first to make the claim that programming is so inherently complex that, in order to manage it successfully, programmers need to harness every trick and abstraction possible. When expressing the abstract nature of computer science, he wrote
The job [of operating or using a computer] was actually beyond the electronic technology of the day, and, as a result, the question of how to get and keep the physical equipment more or less in working condition became in the early days the all-overriding concern. As a result, the topic became —primarily in the USA— prematurely known as computer science —which, actually is like referring to surgery as knife science— and it was firmly implanted in people\'s minds that computing science is about machines and their peripheral equipment. Quod non.
He died in Nuenen on 6 August 2002 after a long struggle with cancer. The following year, the ACM (Association for Computing Machinery) PODC Influential Paper Award in distributed computing was renamed the Dijkstra Prize in his honor.</string>
    
</resources>
